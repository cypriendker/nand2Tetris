// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {

	static int memory;
	static int freeList;
	
    /** Initializes memory parameters. */
    function void init() {
		let memory = 0;
		let freeList = 2048;
		do Memory.poke(freeList, 16383 - freeList);
		do Memory.poke( 2049, 0 );
		
		return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
		return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
		let memory[address] = value;
		return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
		var int bestFit, bestSize, nextFree, freeSize, prevFree, prevFreeTemp;
		
		let bestFit = 0;
		let bestSize = 16000;
		let prevFree = 0;
		let prevFreeTemp = 0;
		let nextFree = freeList;
		while ( ~( nextFree = 0 ) & ~( bestSize = (size + 1 ) ) ){
			let freeSize = nextFree[0];
			let prevFree = prevFreeTemp;
			if( ( freeSize  > size ) & ( freeSize < bestSize ) ){
				let bestFit = nextFree;
				let bestSize = freeSize;				
			}
			let prevFreeTemp = nextFree;
			let nextFree = Memory.peek( nextFree + 1 );
		}
		if ( bestFit = 0 ){
			return 0;
		} else {
			if ( bestSize = ( size + 1 ) ){
				let nextFree = bestFit + 1;
			} else {
				let nextFree = bestFit + size + 1;
				do Memory.poke( nextFree + 1, Memory.peek( bestFit + 1) );
				do Memory.poke( nextFree, bestSize - ( size + 1) );
			}
			
			if (prevFree = 0){
				let freeList = nextFree;
			} else {
				do Memory.poke( prevFree + 1, nextFree );
			}
		}
		do Memory.poke(bestFit, size + 1 );
		return bestFit + 1;
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
		var int segment;
		
		let segment = object - 1;
		let segment[0] = object[-1];
		let segment[1] = freeList;
		let freeList = segment;
		
		return;
    }    
}
